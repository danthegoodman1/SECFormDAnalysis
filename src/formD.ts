// Generated by https://quicktype.io

export interface FormD {
  edgarSubmission: EdgarSubmission;
}

export interface EdgarSubmission {
  schemaVersion:      string[];
  submissionType:     string[];
  testOrLive:         string[];
  primaryIssuer:      PrimaryIssuer[];
  relatedPersonsList: RelatedPersonsList[];
  offeringData:       OfferingDatum[];
}

export interface OfferingDatum {
  industryGroup:                  IndustryGroup[];
  issuerSize:                     IssuerSize[];
  federalExemptionsExclusions:    FederalExemptionsExclusion[];
  typeOfFiling:                   TypeOfFiling[];
  durationOfOffering:             DurationOfOffering[];
  typesOfSecuritiesOffered:       TypesOfSecuritiesOffered[];
  businessCombinationTransaction: BusinessCombinationTransaction[];
  minimumInvestmentAccepted:      string[];
  salesCompensationList:          SalesCompensationList[];
  offeringSalesAmounts:           OfferingSalesAmount[];
  investors:                      Investor[];
  salesCommissionsFindersFees:    SalesCommissionsFindersFee[];
  useOfProceeds:                  UseOfProceed[];
  signatureBlock:                 SignatureBlock[];
}

export interface BusinessCombinationTransaction {
  isBusinessCombinationTransaction: string[];
  clarificationOfResponse:          string[];
}

export interface DurationOfOffering {
  moreThanOneYear: string[];
}

export interface FederalExemptionsExclusion {
  item: string[];
}

export interface IndustryGroup {
  industryGroupType: string[];
}

export interface Investor {
  hasNonAccreditedInvestors:  string[];
  totalNumberAlreadyInvested: string[];
}

export interface IssuerSize {
  revenueRange: string[];
}

export interface OfferingSalesAmount {
  totalOfferingAmount:     string[];
  totalAmountSold:         string[];
  totalRemaining:          string[];
  clarificationOfResponse: string[];
}

export interface SalesCommissionsFindersFee {
  salesCommissions:        FindersFee[];
  findersFees:             FindersFee[];
  clarificationOfResponse: string[];
}

export interface FindersFee {
  dollarAmount: string[];
}

export interface SalesCompensationList {
  recipient: Recipient[];
}

export interface Recipient {
  recipientName:            string[];
  recipientCRDNumber:       string[];
  associatedBDName:         string[];
  associatedBDCRDNumber:    string[];
  recipientAddress:         Address[];
  statesOfSolicitationList: StatesOfSolicitationList[];
  foreignSolicitation:      string[];
}

export interface Address {
  street1:                   string[];
  street2?:                  string[];
  city:                      string[];
  stateOrCountry:            StateOrCountry[];
  stateOrCountryDescription: JurisdictionOfInc[];
  zipCode:                   string[];
}

export enum StateOrCountry {
  Ar = "AR",
  Ny = "NY",
  Tx = "TX",
}

export enum JurisdictionOfInc {
  Arkansas = "ARKANSAS",
  NewYork = "NEW YORK",
  Texas = "TEXAS",
}

export interface StatesOfSolicitationList {
  state:       string[];
  description: string[];
}

export interface SignatureBlock {
  authorizedRepresentative: string[];
  signature:                Signature[];
}

export interface Signature {
  issuerName:     string[];
  signatureName:  string[];
  nameOfSigner:   string[];
  signatureTitle: string[];
  signatureDate:  string[];
}

export interface TypeOfFiling {
  newOrAmendment:  NewOrAmendment[];
  dateOfFirstSale: EdgarPreviousNameList[];
}

export interface EdgarPreviousNameList {
  value: string[];
}

export interface NewOrAmendment {
  isAmendment: string[];
}

export interface TypesOfSecuritiesOffered {
  isDebtType: string[];
}

export interface UseOfProceed {
  grossProceedsUsed:       FindersFee[];
  clarificationOfResponse: string[];
}

export interface PrimaryIssuer {
  cik:                    string[];
  entityName:             string[];
  issuerAddress:          Address[];
  issuerPhoneNumber:      string[];
  jurisdictionOfInc:      JurisdictionOfInc[];
  issuerPreviousNameList: EdgarPreviousNameList[];
  edgarPreviousNameList:  EdgarPreviousNameList[];
  entityType:             string[];
  yearOfInc:              YearOfInc[];
}

export interface YearOfInc {
  overFiveYears: string[];
}

export interface RelatedPersonsList {
  relatedPersonInfo: RelatedPersonInfo[];
}

export interface RelatedPersonInfo {
  relatedPersonName:             RelatedPersonName[];
  relatedPersonAddress:          Address[];
  relatedPersonRelationshipList: RelatedPersonRelationshipList[];
  relationshipClarification:     string[];
}

export interface RelatedPersonName {
  firstName:   string[];
  middleName?: string[];
  lastName:    string[];
}

export interface RelatedPersonRelationshipList {
  relationship: Relationship[];
}

export enum Relationship {
  Director = "Director",
  ExecutiveOfficer = "Executive Officer",
}
